<?xml version="1.0"?>
<!--
 * This file is part of JSynthLib.
 *
 * JSynthLib is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * JSynthLib is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JSynthLib; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
-->
<!--
	Ant build file for JSynthLib.

	Use 'ant -p' to see the available targets for this build file.
	For using different defaults (e.g. for build.compiler, version), define
	the specific properties in a file called 'build.properties'  or at

	Remko Troncon <remko@ulyssis.org>

	Version: $Id: build.xml,v 1.17 2007-10-01 23:50:47 billzwicky Exp $
-->

<project name="JSynthLib" default="build" basedir=".">

	<description>  JSynthLib: A universal synth librarian  </description>

	<!-- User-defined properties -->
	<property file="build.properties"/>

	<!-- Defaults -->
	<property name="src" location="."/>
	<property name="build" location="build"/>
	<property name="bin" location="${build}/bin"/>
	<property name="docs" location="${build}/doc"/>
	<property name="api_docs" location="${docs}/api-docs"/>
	<property name="dist"  location="${build}/distribution"/>
	<property name="synthdrivers"  location="${build}/synthdrivers"/>

	<property name="synth"  value="**"/>
	<property name="deprecation"  value="on"/>
	<property name="show-private-classes"  value="false"/>

	<!-- Conditions -->
	<condition property="isMacOS"> <os family="mac"/> </condition>
	<condition property="isWindows"> <os family="windows"/> </condition>
	<condition property="isUnix"> <os family="unix"/> </condition>

	<!-- Initialization -->
	<target name="init">
		<!-- Create timestamp -->
		<tstamp/>

		<!-- Create build dir -->
		<mkdir dir="${build}"/>

		<!-- Set version number -->
		<property name="version" value="${DSTAMP}cvs"/>
		<filter token="version" value="${version}"/>
		<!--<copy file="Version.java" todir="${build}" filtering="true"/>-->
	</target>


	<!-- Building -->
	<target name="build" depends="init"
			description="Build the complete package">
		<mkdir dir="${bin}"/>
		<!-- Compile -->
		<javac srcdir="${src}" destdir="${bin}" 
			classpath="groovy.jar"
			deprecation="${deprecation}"
			source="1.4" target="1.4">
			<include name="**/*.java"/>
			<exclude name="core/MacOSXMidiWrapper.java" unless="isMacOS"/>
			<exclude name="midiprovider/**"/>
		</javac>
		<!-- Images -->
		<copy todir="${bin}/images">
			<fileset dir="images"/>
		</copy>
		<!-- Resources -->
		<copy file="synthdrivers.properties" todir="${bin}"/>
		<copy todir="${bin}/synthdrivers">
			<fileset dir="synthdrivers">
				<include name="**/*.gif"/>
				<include name="**/*.png"/>
				<include name="**/*.syx"/>
				<include name="**/*.dat"/>
			</fileset>
		</copy>
		<!-- Extra files -->
		<copy file="doc/documentation.html" todir="${docs}"/>
		<copy file="doc/programming.html" todir="${docs}"/>
	</target>

	
	<target name="build-run" depends="build"
			description="Build the official runnable file set">
		<mkdir dir="${build}/run"/>
		
		<!-- Create JAR -->
		<jar jarfile="${build}/run/${ant.project.name}.jar"
			 basedir="${bin}"
			 excludes="core/DeviceListWriter.class,JSynthLib.properties,
					   linuxdevices.conf">
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Main-Class" value="JSynthLib"/>
				<attribute name="Class-Path" value="groovy.jar"/>
			</manifest>
		</jar>
		
		<!-- Assemble extras -->
		<copy todir="${build}/run">
			<fileset dir=".">
				<include name="groovy.jar"/>
			</fileset>
		</copy>
	</target>

			
	<!-- Documentation -->
	<target name="api_docs" depends="init"
			description="Generate API documentation">
		<mkdir dir="${api_docs}"/>
		<javadoc destdir="${api_docs}" nohelp="true" private="${show-private-classes}"
			classpath="groovy.jar">
			<packageset dir="${src}">
				<include name="*/**"/>
				<exclude name="doc/**"/>
				<exclude name="groovy/**"/>
				<exclude name="midiprovider/**"/>
				<exclude name="org/codehaus/groovy/**"/>
			</packageset>
		</javadoc>
	</target>

	<target name="doc" depends="api_docs"/>


	<!-- Distribution --> <!--,api_docs"-->
	<target name="dist" depends="init,build-run"
			description="Create package distribution files (jar, sources, ...)">
		<mkdir dir="${dist}"/>

		<property name="dist-name" value="${ant.project.name}-${version}"/>
		
		<!-- Create runnable bundles -->
		<zip destfile="${dist}/${dist-name}-bin.zip">
			<zipfileset dir="${build}/run" includes="**"
				prefix="${ant.project.name}-${version}/"/>
			<zipfileset dir="." includes="doc/**"
				prefix="${ant.project.name}-${version}/"/>  <!-- not the api -->
		</zip>
		<checksum file="${dist}/${dist-name}-bin.zip"
				  forceoverwrite="yes" fileext=".md5"/>

		<tar destfile="${dist}/${dist-name}-bin.tar.gz"
			 compression="gzip" casesensitive="yes" longfile="gnu">
			<tarfileset dir="${build}/run" includes="**"
				prefix="${ant.project.name}-${version}/"/>
			<tarfileset dir="." includes="doc/**"
				prefix="${ant.project.name}-${version}/"/>  <!-- not the api -->
		</tar>
		<checksum file="${dist}/${dist-name}-bin.tar.gz"
				  forceoverwrite="yes" fileext=".md5"/>

		<!-- Create sources bundles -->
		<zip destfile="${dist}/${dist-name}-src.zip">
			<zipfileset dir="." prefix="${ant.project.name}-${version}-src/">
				<exclude name="bin/**"/>
				<exclude name="build/**"/>
				<exclude name="**/CVS"/>
			</zipfileset>
		</zip>
		<checksum file="${dist}/${dist-name}-src.zip"
				  forceoverwrite="yes" fileext=".md5"/>
		
		<tar destfile="${dist}/${dist-name}-src.tar.gz"
			 compression="gzip" casesensitive="yes" longfile="gnu">
			<tarfileset dir="." prefix="${ant.project.name}-${version}-src/">
				<exclude name="bin/**"/>
				<exclude name="build/**"/>
				<exclude name="**/CVS"/>
			</tarfileset>
		</tar>
		<checksum file="${dist}/${dist-name}-src.tar.gz"
				  forceoverwrite="yes" fileext=".md5"/>

		<!-- Create API docs bundle -->
		<tar destfile="${dist}/${dist-name}-api.tar.gz"
			 compression="gzip" casesensitive="yes" longfile="gnu">
			<!-- bare archive can be use by Eclipse -->
			<tarfileset dir="${api_docs}" includes="**"/>
		</tar>
	</target>


	<!-- Run -->
	<target name="run" description="Run the application" depends="init,build">
		<java classname="JSynthLib" dir="${bin}" fork="true"/>
	</target>


	<!-- Run with debug level 2 -->
	<target name="run-debug" description="Run the application" depends="init,build">
		<java classname="JSynthLib" dir="${bin}" fork="true">
			<arg value="2"/>
		</java>
	</target>

	<target name="rd" depends="run-debug"/>


	<!-- Update driver information -->
	<target name="update-drivers"
			description="Update synth drivers information" depends="init,build">
		<!-- File is gen'd in current dir -->
		<java classname="core.DeviceListWriter" dir="${bin}" fork="true">
			<!--arg value="-v"/-->
		</java>
		<copy todir="${src}" file="synthdrivers.properties" />
	</target>

	<target name="ud" depends="update-drivers"/>

    <!-- Cleanup only the build directory -->
    <target name="clean-build-dir">
		<delete dir="${build}"/>
	</target>

	<!-- Cleanup -->
	<target name="clean" description="Cleanup all generated files" depends="clean-build-dir">
	</target>

	<!-- ==================== Administrative targets  ======================= -->
	<target name="clean-build" depends="clean-build-dir,build"/>
	<target name="cb" depends="clean-build"/>

	<target name="all" depends="clean,build,update-drivers,dist"/>

	<!-- =============================== Help =============================== -->
	<target name="targets">
		<echo>
ANT build targets

The following targets are available:

  all                  Cleanup first and create everything (docs, dists ...)
  clean                Cleanup all generated files
  api_docs             Generate API documentation
  doc                  Short form of "api_docs"
  build                Build JSynthLib
  clean-build-dir      Cleanup the build directory
  clean-build          First "clean" and then "build"
  cb                   Short form of "clean-build"
  dist                 Create package distribution files (jar, sources, ...)
  run                  Run the application
  run-debug            Run the application with debug level 2
  rd                   Short form of "run-debug"
  update-drivers       Update synth drivers information
  ud                   Short form of "update-drivers"
		</echo>
	</target>

	<target name="help" depends="targets" description="Help for this build file"/>

</project>
