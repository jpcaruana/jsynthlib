/*
 * EffectAlgoPanel.java
 *
 * Created on 25. November 2001, 20:23
 */
package synthdrivers.KawaiK4;

import java.awt.*;
import java.awt.geom.*;

/**
 *
 * @author  Gerrit Gehnen
 */
class EffectAlgoPanel extends javax.swing.JPanel {

    /** The color for drawind the lines and text */
    private static final Color FG = Color.black;
    private static final Color FG3D = Color.lightGray;
    /** Holds value of property effectNumber. */
    private int effectNumber;
    /** Creates new form EffectAlgoPanel */
    public EffectAlgoPanel() {
        initComponents();
        this.setPreferredSize(new Dimension(400, 110));
    }

    /**
     * This method is called from within the constructor to initialize
     * the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() { //GEN-BEGIN:initComponents
        setLayout(new java.awt.BorderLayout());
    } //GEN-END:initComponents

    /**
     * Draw an arrow from x1,y1 to x2,y2. It has an arrowhead at the
     * x1,y2 point.
     */
    void drawArrow(Graphics2D g2, float x1, float y1, float x2, float y2) {
        AffineTransform rot1 = AffineTransform.getRotateInstance(0.5, x2, y2);
        g2.draw(new Line2D.Float(x1, y1, x2, y2));
        Point2D p2 = new Point2D.Float(x2, y2);
        float dist = (float) p2.distance(x1, y1);
        Point2D p1 = new Point2D.Float(x2 - ((x2 - x1) * 10 / dist),
				       y2 - ((y2 - y1) * 10 / dist));
        Point2D p1d = rot1.transform(p1, null);
        g2.draw(new Line2D.Float(p2, p1d));
        rot1 = AffineTransform.getRotateInstance(-0.5, x2, y2);
        p1d = rot1.transform(p1, null);
        g2.draw(new Line2D.Float(p2, p1d));
    }

    /**
     * This method is called as result of the repaint() call.  It does
     * all the drawing here.
     */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        this.setOpaque(false);
        setBackground(getParent().getBackground());
        setForeground(getParent().getForeground());
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
			    RenderingHints.VALUE_ANTIALIAS_ON);
	FontMetrics fontMetrics = g2.getFontMetrics();

        g2.drawString("Send 1", 0, 55 + fontMetrics.getMaxAscent() / 2);
        g2.drawString("Send 2", 0, 95 + fontMetrics.getMaxAscent() / 2);
        g2.setPaint(FG3D);
        g2.draw3DRect(85, 30, 100, 50, true); // Box "Effect 1"
        g2.setPaint(FG);
        g2.drawString("Effect1",
		      85 + (100 - fontMetrics.stringWidth("Effect1")) / 2,
		      55 + fontMetrics.getMaxAscent() / 2);

        drawArrow(g2, 50, 55, 80, 55); // Arrow Send1 -> Effect 1

        if (effectNumber < 9) {
            drawArrow(g2, 190, 40, 400, 40); // upper arrow Effect1 -> Output
            drawArrow(g2, 190, 70, 400, 70); // lower arrow Effect1 -> Output
        } else {
            g2.setPaint(FG3D);
            g2.draw3DRect(255, 30, 100, 50, true); // Box "Effect 2"
            g2.setPaint(FG);
            g2.drawString("Effect2",
			  250 + (100 - fontMetrics.stringWidth("Effect2")) / 2,
			  55 + fontMetrics.getMaxAscent() / 2);

            drawArrow(g2, 360, 40, 400, 40); // upper arrow Effect 2 -> Output
            drawArrow(g2, 360, 70, 400, 70); // lower arrow Effect 2 -> Output
            drawArrow(g2, 220, 10, 400, 10);

            g2.drawLine(190, 40, 210, 40);
            drawArrow(g2, 230, 40, 250, 40);
            g2.drawOval(210, 30, 20, 20);
            drawArrow(g2, 220, 70, 250, 70);
            g2.drawLine(220, 95, 220, 70);

            g2.drawLine(50, 95, 220, 95);
            g2.drawLine(220, 30, 220, 10);
            g2.drawLine(215, 35, 225, 45); // the x in the mixer
            g2.drawLine(215, 45, 225, 35);
            g2.drawString("1->2 Bal.",
			  220 - fontMetrics.stringWidth("1->2 Bal.") / 2,
			  55 + fontMetrics.getMaxAscent() / 2);
        }
    }

    /**
     * Getter for property effectNumber.
     * @return Value of property effectNumber.
     */
    public int getEffectNumber() {
        return effectNumber;
    }

    /**
     * Setter for property effectNumber.
     * @param effectNumber New value of property effectNumber.
     */
    public void setEffectNumber(int effectNumber) {
        this.effectNumber = effectNumber;
        this.repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
