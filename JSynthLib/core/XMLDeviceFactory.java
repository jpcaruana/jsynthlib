package core;

import java.io.File;
import java.util.LinkedList;
import java.util.prefs.Preferences;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;


/**
 * @author ribrdb
 */
public abstract class XMLDeviceFactory {
	private static String[] searchpath = new String[ ]{"xmldrivers","/xmldrivers"};
	private static String userpath = "";
	
	public static String[][] getDeviceNames() {
		LinkedList devices = new LinkedList();
		updateSearchPath();
		try {
			SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
			DeviceSearchHandler handler = new DeviceSearchHandler();
			for (int i = 0; i < searchpath.length; i++) {
				File dir = new File(searchpath[i]);
				File[] files = dir.listFiles();
				if (files == null)
					continue;
				for (int j = 0; j < files.length; j++) {
					if (files[j].isDirectory())
						continue;
					handler.reset();
					try {
						parser.parse(files[j],handler);
						devices.addLast(new String[] {
								handler.getName(), // name
								handler.getId(), // inquiry id
								files[j].getPath(), // "filename"
						});
					} catch (SAXParseException ex) {
				           // Error generated by the parser
				           System.out.println("\n** Error parsing device "
				              + ", line " + ex.getLineNumber()
				              + ", uri " + ex.getSystemId());
				           System.out.println("   " + ex.getMessage() );

				           // Use the contained exception, if any
				           Exception  x = ex;
				           if (ex.getException() != null)
				               x = ex.getException();
				           ErrorMsg.reportStatus(x);
				           
					} catch (NotDeviceException ex) {
					} catch (FinishedParsingException ex) {
						devices.addLast(new String[] {
								handler.getName(), // name
								handler.getId(), // inquiry id
								files[j].getPath(), // "filename"
						});
					} catch (SAXException ex) {
				           Exception  x = ex;
				           if (ex.getException() != null)
				               x = ex.getException();
				           ErrorMsg.reportStatus(x);						
					}
				}
			}
		} catch (Exception e) {
			ErrorMsg.reportStatus(e);
			return null;
		}
		String[][] retval = new String[0][];
		return (String[][])devices.toArray(retval);
	}

	public static Device createDevice(String filename, Preferences prefs) {
		System.err.println("Creating XML Device from " + filename);
		return null;
	}
	
	private static void updateSearchPath() {
/*		if (userpath.equals(PatchEdit.appConfig.getXMLpaths())) {
			return;
		}
		userpath = PatchEdit.appConfig.getXMLpaths();
		String[] userpaths = userpath.split(":");
		int l = userpaths.length;
		searchpath = new String[l + 2];
		System.arraycopy(userpaths, 0, searchpath, 2, l);
		searchpath[1] = "xmldrivers";
		searchpath[0] = "/xmldrivers";*/
	}
	
	private static class DeviceSearchHandler extends DefaultHandler {
		private boolean found_start = false;
		private boolean name_done = false;
		private boolean manuf_done = false;
		private boolean id_done = false;
		private LinkedList tags = new LinkedList();
		private StringBuffer name = new StringBuffer();
		private StringBuffer id = new StringBuffer();
		private StringBuffer manuf = new StringBuffer();
		private Locator locator;
		
		public void reset() {
			found_start = name_done = id_done = false;
			tags = new LinkedList();
			name = new StringBuffer();
			id = new StringBuffer();
		}
		
		
		public void setDocumentLocator(Locator l) {
			locator = l;
		}
		public void characters(char[] ch, int start, int length)
				throws SAXException {
			String lasttage = (String)tags.getFirst();
			if (!name_done && "name".equals(lasttage)) {
				name.append(ch,start,length);
			} else if (!id_done && "inquiryid".equals(lasttage)) {
				id.append(ch,start,length);
			} else if (!manuf_done && "manufacturer".equals(lasttage)){
				manuf.append(ch,start,length);
			}
		}
		public void endElement(String uri, String localName, String qName)
				throws SAXException {
			String el = (localName == "") ? qName : localName;
			if (el.equals("name")) {
				name_done = true;
			} else if (el.equals("inquiryid")) {
				id_done = true;
			} else if (el.equals("manufacturer")) {
				manuf_done = true;
			}
			tags.removeFirst();
			if (manuf_done && id_done && name_done)
				throw new FinishedParsingException();
		}
		public void startElement(String uri, String localName, String qName,
				Attributes attributes) throws SAXException {
			String el = (localName == "") ? qName : localName;
			if (!found_start) {
				if (!"device".equals(el)) {
					throw new SAXException(new NotDeviceException());
				}
				found_start = true;
			}
			String lasttag = tags.size() == 0 ? "" : (String)tags.getFirst();
			if (lasttag.equals("xdevice")) {
				tags.addFirst(el);
			} else  if (lasttag.equals("name")
						|| lasttag.equals("inquiryid")
						|| lasttag.equals("manufacturer")) {
				throw new SAXParseException(lasttag + "can only contain text",locator);
			} else {
//				these should come first, but don't want to get the name for something other than a device
				tags.addFirst("x"+el);
			}
		}
		public String getName() { return manuf.toString() + " " + name.toString(); }
		public String getId() { return id.toString(); }
	}
	
	private static class NotDeviceException extends SAXException {
		NotDeviceException() {
			super("This file does not contain a device.");
		}
	}
	private static class FinishedParsingException extends SAXException {
		FinishedParsingException() {
			super("Done with this file.  Move along...");
		}
	}
	
	
}