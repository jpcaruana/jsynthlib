package org.jsynthlib.jsynthlib.xml;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.prefs.Preferences;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import core.Device;
import core.ErrorMsg;


/**
 * @author ribrdb
 */
public abstract class XMLDeviceFactory {
    private static String[] searchpath = new String[ ]{"org/jsynthlib/jsynthlib/synthdrivers","/org/jsynthlib/jsynthlib/synthdrivers"};
    private static String userpath = "";
    
    public static String[][] getDeviceNames() {
        LinkedList devices = new LinkedList();
        updateSearchPath();
        try {
            SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
            DeviceSearchHandler handler = new DeviceSearchHandler();
            DeviceFilter filter = new DeviceFilter();
            LinkedList filelist = new LinkedList();
            for (int i = 0; i < searchpath.length; i++) {
                File dir = new File(searchpath[i]);
                File[] files = dir.listFiles(filter);
                if (files == null)
                    continue;
                for (int j = 0; j < files.length; j++) {
                    filelist.addLast(files[j]);
                }
                while (!filelist.isEmpty()) {
                    File file = (File)filelist.removeFirst();
                    if (file.isDirectory()) {
                        files = file.listFiles(filter);
                        for (int j = 0; j < files.length; j++) {
                            filelist.addLast(files[j]);
                        }
                        continue;
                    }
                    handler.reset();
                    try {
                        parser.parse(file,handler);
                        devices.addLast(new String[] {
                                handler.getName(), // name
                                handler.getId(),   // inquiry id
                                file.getPath(),    // "filename"
                        });
                    } catch (SAXParseException ex) {
                        // Error generated by the parser
                        System.out.println("\n** Error parsing device "
                                + ", line " + ex.getLineNumber()
                                + ", uri " + ex.getSystemId());
                        System.out.println("   " + ex.getMessage() );
                        
                        // Use the contained exception, if any
                        Exception  x = ex;
                        if (ex.getException() != null)
                            x = ex.getException();
                        ErrorMsg.reportStatus(x);
                        
                    } catch (NotDeviceException ex) {
                    } catch (FinishedParsingException ex) {
                        devices.addLast(new String[] {
                                handler.getName(), // name
                                handler.getId(),  // inquiry id
                                file.getPath(),  // "filename"
                        });
                    } catch (SAXException ex) {
                        Exception  x = ex;
                        if (ex.getException() != null)
                            x = ex.getException();
                        ErrorMsg.reportStatus(x);						
                    }
                }
            }
        } catch (Exception e) {
            ErrorMsg.reportStatus(e);
            return null;
        }
        String[][] retval = new String[0][];
        return (String[][])devices.toArray(retval);
    }
    
    public static Device createDevice(String filename, Preferences prefs) {
        SAXParser parser;
        try {
            parser = SAXParserFactory.newInstance().newSAXParser();
        } catch (ParserConfigurationException e) {
            ErrorMsg.reportError("Can't load driver", "Unable to create XML parser", e);
            return null;
        } catch (SAXException e) {
            ErrorMsg.reportError("Can't load driver", "Unable to create XML parser", e);
            return null;
        }
        DeviceLoadHandler handler = new DeviceLoadHandler();
        File devicefile = new File(filename);
        handler.setBasePath(devicefile.getParentFile());
        try {
            parser.parse(devicefile, handler);
            XMLDevice d = handler.getDevice();
            d.setPreferences(prefs);
            return d;
        } catch (SAXParseException ex) {
            Exception  x = ex;
            if (ex.getException() != null)
                x = ex.getException();
            ErrorMsg.reportError("Can't load device",
                    "Error parsing line " + ex.getLineNumber() + " of device\n"
                    + ex.getSystemId()
                    + "\n\n" + ex.getMessage(),
                    x);
        } catch (NotDeviceException ex) {
            ErrorMsg.reportError("Can't load device",
                    "Can't load " + filename + ". It is not a device.");
        } catch (SAXException ex) {
            Exception x = ex;
            if (ex.getException() != null)
                x = ex.getException();
            ErrorMsg.reportError("Can't load device", 
                    "Error parsing " + filename + ".\n" + ex.getMessage(), x);
        } catch (IOException e) {
            ErrorMsg.reportError("Can't load device",
                        "Error reading " + filename, e);   
        }

        return null;
    }
    
    private static void updateSearchPath() {
        /*		if (userpath.equals(PatchEdit.appConfig.getXMLpaths())) {
         return;
         }
         userpath = PatchEdit.appConfig.getXMLpaths();
         String[] userpaths = userpath.split(File.pathSeparator);
         int l = userpaths.length;
         searchpath = new String[l + 2];
         System.arraycopy(userpaths, 0, searchpath, 2, l);
         searchpath[1] = "xmldrivers";
         searchpath[0] = "/xmldrivers";*/
    }
    
    private static class DeviceFilter implements FileFilter {
        public boolean accept(File pathname) {
            if (pathname.getName().equals("CVS"))
                return false;
            if (pathname.isDirectory())
                return true;
            if (pathname.getName().endsWith(".xml"))
                return true;
            return false;
        }
    }
}